// @flow

/* eslint class-methods-use-this:0 */

import Consul from 'consul';
import axios from 'axios';
import { BadRequest, InternalServerError } from 'http-errors';
import { App } from './App';
import { Importer } from './Importer';

const debug = require('debug')('neuron:ApiRpc');

export interface ApiRpcParamsInterface {
  id: string;
  version: string;
}

/**
 * API RPC connector.
 */
export class ApiRpc {
  id: string;
  app: App;
  params: ApiRpcParamsInterface;
  requestParams: Object;
  request: axios.Axios;
  consul: Consul;

  /**
   * @param {Object} params Application params.
   * @param {string} params.id Application unique ID. It should be the same ID
   *                           as registered in Developer Portal.
   * @param {string} params.version Application version. This version should be
   *                                active in Developer Portal.
   * @param {Object} app App instance.
   * @param {Object} config Config params required to connect to API server.
   * @param {string} config.apiUrl URL of API server.
   * @param {string} config.apiKey API key generated by Develper Portal.
   * @param {string} config.consul.host Consul host.
   * @param {number} config.consul.port Consul port.
   */
  constructor(
    params: ApiRpcParamsInterface,
    app: *,
    config: {
      apiUrl: string,
      apiKey: string,
      consul: { host: string, port: number },
    },
  ) {
    this.id = `${params.id}:${params.version}`;
    this.params = params;
    this.requestParams = {
      baseURL: config.apiUrl,
      headers: { Authorization: `ApiKey ${config.apiKey}` },
    };

    this.app = app;

    this.request = axios.create(this.requestParams);

    this.consul = new Consul({
      host: config.consul.host,
      port: config.consul.port,
      promisify: true,
    });
  }

  /**
   * Registers app in Consul service discovery and adds app info to Consul KV store.
   *
   * @param {string} ip Application IP address.
   * @param {number} port Application port.
   * @param {Object} params Params to save in Consul KV storage.
   */
  async register(ip: string, port: number, params: Object): Promise<any> {
    await this.consul.kv.set(this.id, JSON.stringify(params, null, 2));

    await this.consul.agent.service.register({
      id: this.id,
      name: this.id,
      address: ip,
      port,
      tags: ['app'],
      check: {
        http: `http://${ip}:${port}/health-check`,
        interval: '1s',
        timeout: '5s',
        deregistercriticalserviceafter: '20s',
        notes: 'Checks that microservice is alive and functioning',
      },
    });

    debug('app successfully registered: %s', this.id);
  }

  /**
   * Deregisters app in Consul service discovery.
   *
   * @return {Promise}
   */
  async deregister(): Promise<any> {
    await this.consul.agent.service.deregister({
      id: this.id,
    });

    debug('app successfully deregistered: %s', this.id);
  }

  async findImportSession(query: Object) {
    const { data } = await this.request.post(
      '/app/findImportSession',
      {
        app: this.id,
        query,
      },
      this.requestParams,
    );

    if (!this.app.importers[data.importer]) {
      throw new InternalServerError(
        `Importer ${data.importer} is not registered`,
      );
    }

    const importer = new this.app.importers[data.importer].Class(
      data.id,
      this,
      this.app.config,
    );

    importer.currentStage = data.currentStage;
    importer.status = data.statusText;
    importer.deserializeState(data.state);

    return importer;
  }

  async setImporterAuthStageResult(importer: Importer, stageResult: Object) {
    if (!importer.id) {
      throw new BadRequest('Importer does not have sessionId');
    }

    await this.request.post(
      '/app/setImporterAuthStageResult',
      {
        importSessionId: importer.id,
        stageResult,
      },
      this.requestParams,
    );

    debug(
      'importer auth stage result successfully updated (importSessionId = %s)',
      importer.id,
    );
  }

  async updateImporterStatus(
    importSessionId: string,
    status: string,
  ): Promise<void> {
    await this.request.post(
      '/app/updateImporterStatus',
      {
        importSessionId,
        status,
      },
      this.requestParams,
    );

    debug('importer status successfully updated to %s', status);
  }

  async getUserCompleteData(
    accessToken: string,
    enabledHealthInsights: string[] = [],
  ): Promise<Object> {
    const response = await this.request.get(
      '/app/getUserCompleteData',
      Object.assign({}, this.requestParams, {
        params: {
          healthInsights: enabledHealthInsights.join(','),
        },
        headers: Object.assign({}, this.requestParams.headers, {
          accessToken,
        }),
      }),
    );

    return response.data;
  }

  /**
   * Get all user data for given app and schema id.
   *
   * TODO: remove accessToken and use apiKey
   *
   * @param accessToken
   * @param app Application ID.
   * @param schema Schema ID.
   * @return {Promise<Object>}
   */
  async getUserData(
    accessToken: string,
    app: string,
    schema: string,
  ): Promise<Object> {
    const response = await this.request.get(
      '/app/getUserData',
      Object.assign({}, this.requestParams, {
        params: {
          app,
          schema,
        },
        headers: Object.assign({}, this.requestParams.headers, {
          accessToken,
        }),
      }),
    );

    return response.data;
  }

  /**
   * Queries user data using GraphQL.
   *
   * TODO: This method should make a real API call to query user data from API service.
   *       For now it just mock method that does nothing.
   *
   * @param query GraphQL query.
   * @param {Object} params Params provided to query.
   * @return {Promise<Object>}
   */
  userQuery(query: string, params: Object = {}): Promise<Object> {
    debug('user query', query, params);

    const weightIns = [
      {
        _id: '2c58043b-cc61-4e90-948c-32bafdc6c480',
        dt: '2017-10-11T00:00:04.000Z',
        weightIn: 47,
      },
      {
        _id: 'd7445ff9-05fd-4271-a29c-cc1fdfb34294',
        dt: '2017-10-12T00:00:04.000Z',
        weightIn: 55,
      },
      {
        _id: '4fe5f108-23c2-4354-baeb-22338fec5061',
        dt: '2017-10-13T00:00:04.000Z',
        weightIn: 48,
      },
      {
        _id: '57b8029d-3331-4437-882c-f4d3545764ed',
        dt: '2017-10-14T00:00:04.000Z',
        weightIn: 48,
      },
      {
        _id: '4f5bd0ae-227e-4c3d-8fd4-b7cdb1070611',
        dt: '2017-10-15T00:00:04.000Z',
        weightIn: 55,
      },
      {
        _id: '72c31696-147e-4854-ae22-4a1f1074051e',
        dt: '2017-10-16T00:00:04.000Z',
        weightIn: 53,
      },
      {
        _id: '2d410a84-e3a1-45e9-bcaa-03436601f930',
        dt: '2017-10-17T00:00:04.000Z',
        weightIn: 55,
      },
      {
        _id: 'a50ff442-cc3d-436b-9ff0-7c3a3039e782',
        dt: '2017-10-18T00:00:04.000Z',
        weightIn: 55,
      },
      {
        _id: '8db0f151-ec59-42cf-9ea1-ed18017fb053',
        dt: '2017-10-19T00:00:04.000Z',
        weightIn: 46,
      },
      {
        _id: 'fd854bad-79c0-4a05-8892-e9685792f89c',
        dt: '2017-10-20T00:00:04.000Z',
        weightIn: 51,
      },
    ];

    if (params.id) {
      return Promise.resolve({
        profile: {
          country: 'US',
        },
        data: {
          'ai.doc.neuron-app-example': {
            weightIn: weightIns.find(item => item._id === params.id),
          },
        },
      });
    }

    return Promise.resolve({
      data: {
        'ai.doc.neuron-app-example': { weightIns },
      },
    });
  }

  /**
   * Queries knowledge base data using GraphQL.
   *
   * TODO: This method should make a real API call to query data from KB.
   *       For now it just mock method that does nothing.
   *
   * @param query GraphQL query.
   * @param {Object} params Params provided to query.
   * @return {Promise<Object>}
   */
  kbQuery(query: string, params: Object = {}): Promise<Object> {
    debug('KB query', query, params);

    return Promise.resolve({ averageWeight: 80 });
  }
}
